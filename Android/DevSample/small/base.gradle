apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations {
    aarProvided
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
    provided 'com.android.support:support-v4:23.2.1'
}

afterEvaluate {
    File aarDir = new File(project.buildDir, 'intermediates/exploded-aar')
    Set<ResolvedDependency> aars = getAllDependencies(project.configurations.aarProvided)
    project.tasks.withType(JavaCompile).each {
        it.doFirst { JavaCompile javac ->
            def jars = []
            aars.each {
                def dir = new File(aarDir, "${it.moduleGroup}/${it.moduleName}/${it.moduleVersion}")
                jars += new File(dir, 'jars/classes.jar')
            }
            javac.classpath += project.files(jars)
        }
    }
}

public static Set<ResolvedDependency> getAllDependencies(Configuration configuration) {
    ResolvedConfiguration resolvedConfiguration = configuration.resolvedConfiguration
    def firstLevelDependencies = resolvedConfiguration.firstLevelModuleDependencies
    Set<ResolvedDependency> allDependencies = new HashSet<>()
    firstLevelDependencies.each {
        collectDependencies(it, allDependencies)
    }
    return allDependencies
}

private static void collectDependencies(ResolvedDependency node, Set<ResolvedDependency> out) {
    if (out.find { addedNode -> addedNode.name == node.name } == null) {
        out.add(node)
    }
    // Recursively
    node.children.each { newNode ->
        collectDependencies(newNode, out)
    }
}